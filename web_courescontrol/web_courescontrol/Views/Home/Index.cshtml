<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">
    <link rel="icon" type="image/png" sizes="16x16" href="~/images/favicon.png">
    <title>用户登录</title>
    <link href="~/css/lib/sweetalert/sweetalert.css" rel="stylesheet">
    <link href="~/css/style.css" rel="stylesheet">

    <style>
        body {
            background-color: #eee;
            overflow: hidden;
        }

        canvas {
            background-color: #eee;
            display: block;
            margin: 0 auto;
        }
    </style>
</head>

<body class="header-fix fix-sidebar">
    <div style="position:absolute;">
        <canvas id="canvas"></canvas>
    </div>
    <div style="position:relative;">
        <div id="main-wrapper">
            <div class="unix-login">
                <div class="container-fluid">
                    <div class="row justify-content-center">
                        <div class="col-lg-4">
                            <div class="login-content card">
                                <div class="login-form">
                                    <h4>系统登录</h4>
                                    <form action='@Url.Action("Judge")' method="post">
                                        <div class="form-group">
                                            <label>学号/工号</label>
                                            <input name="id" type="text" class="form-control" placeholder="学号/工号">
                                        </div>
                                        <div class="form-group">
                                            <label>登录密码</label>
                                            <input name="pwd" type="password" class="form-control" placeholder="登录密码">
                                        </div>
                                        @if (ViewBag.type == 1)
                                        {
                                            <div class="alert alert-danger text-center">
                                                账号或密码输入错误！
                                            </div>
                                        }
                                        <button type="submit" class="btn btn-primary btn-flat m-b-30 m-t-30">登录</button>
                                    </form>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="~/js/lib/jquery/jquery.min.js"></script>
    <script src="~/js/lib/bootstrap/js/popper.min.js"></script>
    <script src="~/js/lib/bootstrap/js/bootstrap.min.js"></script>
    <script src="~/js/jquery.slimscroll.js"></script>
    <script src="~/js/sidebarmenu.js"></script>
    <script src="~/js/lib/sticky-kit-master/dist/sticky-kit.min.js"></script>
    <script src="~/js/custom.min.js"></script>
    <script src="~/js/lib/toastr/toastr.min.js"></script>
    <script src="~/js/lib/toastr/toastr.init.js"></script>
    <script src="~/js/lib/sweetalert/sweetalert.min.js"></script>
    <script src="~/js/lib/sweetalert/sweetalert.init.js"></script>
    <script>
        var canvas = document.getElementById("canvas");
        var ctx = canvas.getContext("2d");
        var cw = canvas.width = window.innerWidth,
            cx = cw / 2;
        var ch = canvas.height = window.innerHeight,
            cy = ch / 2;

        ctx.fillStyle = "#000";
        var linesNum = 16;
        var linesRy = [];
        var requestId = null;

        function Line(flag) {
            this.flag = flag;
            this.a = {};
            this.b = {};
            if (flag == "v") {
                this.a.y = 0;
                this.b.y = ch;
                this.a.x = randomIntFromInterval(0, ch);
                this.b.x = randomIntFromInterval(0, ch);
            } else if (flag == "h") {
                this.a.x = 0;
                this.b.x = cw;
                this.a.y = randomIntFromInterval(0, cw);
                this.b.y = randomIntFromInterval(0, cw);
            }
            this.va = randomIntFromInterval(25, 100) / 100;
            this.vb = randomIntFromInterval(25, 100) / 100;

            this.draw = function () {
                ctx.strokeStyle = "#ccc";
                ctx.beginPath();
                ctx.moveTo(this.a.x, this.a.y);
                ctx.lineTo(this.b.x, this.b.y);
                ctx.stroke();
            }

            this.update = function () {
                if (this.flag == "v") {
                    this.a.x += this.va;
                    this.b.x += this.vb;
                } else if (flag == "h") {
                    this.a.y += this.va;
                    this.b.y += this.vb;
                }

                this.edges();
            }

            this.edges = function () {
                if (this.flag == "v") {
                    if (this.a.x < 0 || this.a.x > cw) {
                        this.va *= -1;
                    }
                    if (this.b.x < 0 || this.b.x > cw) {
                        this.vb *= -1;
                    }
                } else if (flag == "h") {
                    if (this.a.y < 0 || this.a.y > ch) {
                        this.va *= -1;
                    }
                    if (this.b.y < 0 || this.b.y > ch) {
                        this.vb *= -1;
                    }
                }
            }

        }

        for (var i = 0; i < linesNum; i++) {
            var flag = i % 2 == 0 ? "h" : "v";
            var l = new Line(flag);
            linesRy.push(l);
        }

        function Draw() {
            requestId = window.requestAnimationFrame(Draw);
            ctx.clearRect(0, 0, cw, ch);

            for (var i = 0; i < linesRy.length; i++) {
                var l = linesRy[i];
                l.draw();
                l.update();
            }
            for (var i = 0; i < linesRy.length; i++) {
                var l = linesRy[i];
                for (var j = i + 1; j < linesRy.length; j++) {
                    var l1 = linesRy[j]
                    Intersect2lines(l, l1);
                }
            }
        }

        function Init() {
            linesRy.length = 0;
            for (var i = 0; i < linesNum; i++) {
                var flag = i % 2 == 0 ? "h" : "v";
                var l = new Line(flag);
                linesRy.push(l);
            }

            if (requestId) {
                window.cancelAnimationFrame(requestId);
                requestId = null;
            }

            cw = canvas.width = window.innerWidth,
                cx = cw / 2;
            ch = canvas.height = window.innerHeight,
                cy = ch / 2;

            Draw();
        };

        setTimeout(function () {
            Init();

            addEventListener('resize', Init, false);
        }, 15);

        function Intersect2lines(l1, l2) {
            var p1 = l1.a,
                p2 = l1.b,
                p3 = l2.a,
                p4 = l2.b;
            var denominator = (p4.y - p3.y) * (p2.x - p1.x) - (p4.x - p3.x) * (p2.y - p1.y);
            var ua = ((p4.x - p3.x) * (p1.y - p3.y) - (p4.y - p3.y) * (p1.x - p3.x)) / denominator;
            var ub = ((p2.x - p1.x) * (p1.y - p3.y) - (p2.y - p1.y) * (p1.x - p3.x)) / denominator;
            var x = p1.x + ua * (p2.x - p1.x);
            var y = p1.y + ua * (p2.y - p1.y);
            if (ua > 0 && ub > 0) {
                markPoint({
                    x: x,
                    y: y
                })
            }
        }

        function markPoint(p) {
            ctx.beginPath();
            ctx.arc(p.x, p.y, 2, 0, 2 * Math.PI);
            ctx.fill();
        }

        function randomIntFromInterval(mn, mx) {
            return ~~(Math.random() * (mx - mn + 1) + mn);
        }</script>
</body>

</html>